#!/bin/bash

ROUNDS=$1

MODEL=$2

declare -a models=("resnet18" "densenet201")

for ((outer=0; outer<$ROUNDS; outer++))
do
	for ((inner=1; inner<=63; inner++))
	do
		CONT=$((outer*63+inner))
		if [ $MODEL == "all" ]; then
			for model in "${models[@]}"; do
				CONTAINER_OUTPUT="/tmp/$model-$CONT-container.txt"
				echo "" > $CONTAINER_OUTPUT
				DOCKER_OUTPUT="/tmp/$model-$CONT-docker.txt"
				echo "" > $DOCKER_OUTPUT
				exec 3<> $DOCKER_OUTPUT
				# --rm
				# By default a container's file system persists even after the container exits.
				# But if you are running short-term foreground processes, these container file systems can really pile up.
				# If instead youâ€™d like Docker to automatically clean up the container and remove the file system when the container exits,
				# you can add the --rm flag

				# -d
				# Run container in background and print container ID

				# --cpus
				# Number of CPUs

				# --cpuset-cpus
				# CPUs in which to allow execution (0-3, 0,1)
				
				# docker run -d --rm --net=none --cpuset-cpus="$inner" -v /root/persistent/scripts:/scripts fschmidt/micropython "/scripts/sleep.py" 1>/dev/null 2>&3
				/root/docker-instrumented/bundles/1.13.0/binary-client/docker run -d --rm --net=none --cpus=1 -v $CONTAINER_OUTPUT:/tmp/tmp.txt "$model" 1>/dev/null 2>&3
				# exec 3>&- # close the write file descriptor 3
			done
		else
			CONTAINER_OUTPUT="/tmp/$MODEL-$CONT-container.txt"
			echo "" > $CONTAINER_OUTPUT
			DOCKER_OUTPUT="/tmp/$MODEL-$CONT-docker.txt"
			echo "" > $DOCKER_OUTPUT
			exec 3<> $DOCKER_OUTPUT
			/root/docker-instrumented/bundles/1.13.0/binary-client/docker run -d --rm --net=none --cpus=1 -v $CONTAINER_OUTPUT:/tmp/tmp.txt "$MODEL" 1>/dev/null 2>&3
			# exec 3>&- # close the write file descriptor 3
		fi
	done
done

